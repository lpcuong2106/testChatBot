{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","shedule","setSchedule","useEffect","Tabletop","init","key","callback","googleData","console","log","simpleSheet","today","Date","getDay","study_name","undefined","indexObject","textMessage","recipient_ids","j","length","messageData","JSONdMessageData","i","JSON","stringify","payload","access_token","options","axios","post","then","res","send_to_facebook","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,kC,8XCgG5BC,MA1Ff,WAAgB,IAAD,EACgBC,mBAAS,MADzB,mBACRC,EADQ,KACCC,EADD,KAEbC,qBAAU,WAIRC,IAASC,KAAK,CACZC,IAAK,+CACLC,SAAU,SAAAC,GACRC,QAAQC,IAAIF,GACZN,EAAYM,IAEdG,aAAa,MARd,IAeH,IAAIC,EAAQ,IAAIC,KAKhB,GAAe,OAAZZ,EAAkB,CACAW,EAAME,SAAzB,IACIC,EAAad,EAAQW,EAAME,SAAW,GAE1C,GADAL,QAAQC,IAAIK,QACMC,GAAdD,EACQ,iFAA+CA,EAAW,GAAK,wDACrD,4IAEpB,IAAI,IAAIE,KAAeF,EACV,gFAAiDA,EAAWE,GAAe,2EAA4CA,MAK5H,4EAgCZ,OA9BA,SAA0BC,GAGxB,IAFA,IAAIC,EAAgB,CAAC,mBAEZC,EAAI,EAAGA,EAAID,EAAcE,OAAQD,IAAK,CAC7C,IAAIE,EAAc,CAChB,UAAa,CACX,GAAMH,EAAcC,IAEtB,QAAW,CACT,KAAQF,IAGRK,EAAmB,GACvB,IAAI,IAAIC,KAAKF,EACXC,EAAiBC,GAAKC,KAAKC,UAAUJ,EAAYE,IAEnD,IAAIG,EAAUJ,EACdI,EAAQC,aAfM,wOAgBd,IAAIC,EAAU,CACZ,OAAU,OACV,QAAWF,GAEbG,IAAMC,KAAK,8CAA+CF,GAASG,MAAK,SAAAC,GACtExB,QAAQC,IAAIuB,MAIhBxB,QAAQC,IAAI,oBAEdwB,CAAiB,cAEf,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACO,4CADP,wBAGA,uBACEH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJN,kBCvEYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,kB","file":"static/js/main.6bc159cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Tabletop from 'tabletop';\nimport axios from 'axios';\n\nfunction App() {\n  let [shedule, setSchedule] = useState(null);\n  useEffect(() => {\n    onLoad();\n  }, []);\n  function onLoad(){\n    Tabletop.init({\n      key: '1pS_8eZI5A_Wx2S76bXDXAlA2T34nshhjKYgxJQJg8o8',\n      callback: googleData => {\n        console.log(googleData);\n        setSchedule(googleData);\n      },\n      simpleSheet: true\n    })\n\n    // if (week_mod == 3) {\n    //   message = message + \"\\nHôm nay cũng là thứ 4, 21h đi đá bóng nhé\";\n    // }\n  }\n  var today = new Date();\n  // var theDay = Math.round(((today - first) / (1000 * 60 * 60 * 24)) + .5 , 0);\n  var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n\n  let message;\n  if(shedule !== null) {\n    var dayName = days[today.getDay()];\n    let study_name = shedule[today.getDay() - 1];\n    console.log(study_name);\n    if (study_name == undefined) {\n      message = \"Opps!!!\\nLát nữa cậu phải học môn có mã là \"+ study_name[0] + \" từ 18h đến 21h đấy nhé!!\";\n      message = message + \"\\nVui lòng update lại từ điển để mình có thể biết được tên môn\";\n    } else {\n      for(let indexObject in study_name){\n        message += \"Hê lô mai phen :))\\nLát nữa cậu phải học môn \"+ study_name[indexObject] + \" từ 18h đến 21h đấy nhé!!\" + 'Tiết thứ:' + indexObject;\n      }\n\n    }\n  } else {\n    message = \"Hôm nay cậu được nghỉ đấy (tunghoa)\";\n  }\n  function send_to_facebook(textMessage) {\n    var recipient_ids = ['100018778928523'];\n    var API_TOKEN = 'EAAjgE3NNNdUBACMRKKF2YgI1qcONFDqotNESSwy3p3SPRA7Gxk3QXiNucPZAdi5sN4CcQOedZBdnLtEwyAd9x9weJ57TV7Uqo7KVUeuq7rJbnVgVYaXugtSZAqYS740yVzDMC6Dpfnc5B6fNRZBAlbnuu9yPk7JENyTvLa4XNlC5PBesGHwZChtI5MLmYAyhmuOZB7ZB92689NHhJqOFhRPVXQVDztpP9sZD';\n    for (var j = 0; j < recipient_ids.length; j++) {\n      var messageData = {\n        \"recipient\": {\n          \"id\": recipient_ids[j]\n        },\n        \"message\": {\n          \"text\": textMessage\n        }\n      }\n      var JSONdMessageData = {};\n      for(var i in messageData){\n        JSONdMessageData[i] = JSON.stringify(messageData[i])\n      }\n      var payload = JSONdMessageData;\n      payload.access_token = API_TOKEN;\n      var options = {\n        \"method\": \"post\",\n        \"payload\": payload,\n      };\n      axios.post(\"https://graph.facebook.com/v5.0/me/messages\", options).then(res => {\n        console.log(res);\n      });\n      // UrlFetchApp.fetch(\"https://graph.facebook.com/v5.0/me/messages\", options);\n    }\n    console.log(\"Send Facebook ok\");\n  }\n  send_to_facebook('hello work');\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}