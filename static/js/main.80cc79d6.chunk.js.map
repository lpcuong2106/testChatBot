{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","shedule","setSchedule","useEffect","Tabletop","init","key","callback","googleData","console","log","simpleSheet","ListObject","CT242","KL001","CT174","CT182","CT181","CT183","CT180","today","Date","message","getDay","getDate","getMonth","getFullYear","getHours","getMinutes","ScheduleToday","undefined","i_mySubjectToday","CodeOfSubject","textMessage","payload","axios","method","url","data","send_to_telegram","className","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,kC,8XCkG5BC,MA3Ff,WAAgB,IAAD,EAEkBC,mBAAS,MAF3B,mBAENC,EAFM,KAEGC,EAFH,KAGXC,qBAAU,WAKNC,IAASC,KAAK,CACVC,IAAK,+CACLC,SAAU,SAAAC,GACNC,QAAQC,IAAIF,GACZN,EAAYM,IAEhBG,aAAa,MATlB,IAaH,IAAIC,EAAa,CACfC,MAAO,0FACPC,MAAO,4EACPC,MAAO,wFACPC,MAAO,kEACPC,MAAO,8EACPC,MAAO,2FACPC,MAAO,+DAELC,EAAQ,IAAIC,KAEZC,EAAU,GACd,GAAgB,OAAZrB,EAAkB,CAElBqB,GAAW,yCAJJ,CAAC,qBAAY,eAAW,cAAU,mBAAU,oBAAW,kBAAW,qBAGtDF,EAAMG,UACiC,IAAMH,EAAMI,UAAY,IAAMJ,EAAMK,WAAY,KAAUL,EAAMM,cAAgB,YAAUN,EAAMO,WAAa,IAAIP,EAAMQ,aACjLN,GAAW,4EACXA,GAAW,sCACX,IAAIO,EAAgB5B,EAAQmB,EAAMG,SAAW,GAE7C,GADAd,QAAQC,IAAImB,QACUC,IAAlBD,EACAP,GAAW,gLAEX,IAAK,IAAIS,KAAoBF,EAC3B,GAAuC,SAApCA,EAAcE,GAA6B,CAC7C,IAAIC,EAAgBH,EAAcE,GACjCT,GAAW,sBAAcS,EAAmB,QAAUC,EAAiB,YAAUpB,EAAWoB,GAAgB,KAMtHV,GAAW,gBACXA,GAAW,iMAqBb,OAlBA,SAA0BW,GACtB,IAAIC,EAAU,CACV,OAAU,cACV,SAAY,UACZ,KAAQD,EACR,WAAc,QAIlBE,IAAM,CACFC,OAAQ,OACRC,IAAK,6EACLC,KAAMJ,IAEVzB,QAAQC,IAAI,oBAGhB6B,CAAiBjB,GAEb,yBAAKkB,UAAU,OACX,4BAAQA,UAAU,cACd,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzC,mCACS,4CADT,wBAGA,uBACIH,UAAU,WACVI,KAAK,sBACLC,OAAO,SACPC,IAAI,uBAJR,kBCzEIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.80cc79d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Tabletop from 'tabletop';\nimport axios from 'axios';\n\n\nfunction App() {\n\n    let [shedule, setSchedule] = useState(null);\n    useEffect(() => {\n        onLoad();\n    }, []);\n\n    function onLoad() {\n        Tabletop.init({\n            key: '1pS_8eZI5A_Wx2S76bXDXAlA2T34nshhjKYgxJQJg8o8',\n            callback: googleData => {\n                console.log(googleData);\n                setSchedule(googleData);\n            },\n            simpleSheet: true\n        })\n\n    }\n    let ListObject = {\n      CT242: 'Kiến trúc và Thiết kế phần mềm. Tại phòng 303/DB',\n      KL001: 'Pháp luật đại cương. Tại phòng 206/B1',\n      CT174: 'Phân tích và thiết kế thuật toán. Tại phòng 201/C1',\n      CT182: 'Ngôn ngữ mô hình hóa. Tại phòng LT3/DI',\n      CT181: 'Hệ thống thông tin doanh nghiệp. Tại phòng LT3/DI',\n      CT183: 'Anh văn chuyên môn công nghệ thông tin 1. Tại phòng HTR/DB',\n      CT180: 'Cơ sở dữ liệu. Tại phòng 207/KH',\n    }\n    var today = new Date();\n    var days = ['Chủ Nhật', 'Thứ Hai', 'Thứ Ba', 'Thứ Tư', 'Thứ Năm', 'Thứ Sáu', 'Thứ Bảy'];\n    let message = '';\n    if (shedule !== null) {\n        var dayName = days[today.getDay()];\n        message += 'Hello Cuong so cute! Hôm nay là ' + dayName + \" \" + today.getDate() + '-' + today.getMonth() +1 + \"-\" + today.getFullYear() + \" Lúc: \"+ today.getHours() + \":\"+today.getMinutes();\n        message += '\\nHôm nay bạn phải học các môn sau đây:\\n';\n        message += '<pre><code class=\"language-python\">';\n        let ScheduleToday = shedule[today.getDay() - 1];\n        console.log(ScheduleToday);\n        if (ScheduleToday === undefined) {\n            message += \"\\nVui lòng update lại từ điển để mình có thể biết được lịch học hôm nay của bạn\\n\";\n        } else {\n            for (let i_mySubjectToday in ScheduleToday) {\n              if(ScheduleToday[i_mySubjectToday] !== 'null'){\n               let CodeOfSubject = ScheduleToday[i_mySubjectToday];\n                message += 'Tiết thứ ' + i_mySubjectToday + \": HP \" + CodeOfSubject +  \" Môn: \"+ ListObject[CodeOfSubject] +\"\\n\";\n              }\n\n            }\n\n        }\n      message += '</code></pre>';\n      message += \"Bạn có thể xem toàn bộ lịch <a href='https://docs.google.com/spreadsheets/d/1pS_8eZI5A_Wx2S76bXDXAlA2T34nshhjKYgxJQJg8o8/edit#gid=1645683997'>ở đây</a>\";\n\n    }\n    function send_to_telegram(textMessage) {\n        var payload = {\n            \"method\": \"sendMessage\",\n            \"chat_id\": -390138423,\n            \"text\": textMessage,\n            \"parse_mode\": \"HTML\"\n        }\n\n        var API_TOKEN = '880407226:AAH-_JyUkP154P9PkUxnwBFHHHoV4b9QbFU';\n        axios({\n            method: 'POST',\n            url: 'https://api.telegram.org/bot' + API_TOKEN + '/',\n            data: payload,\n        });\n        console.log(\"Send Telegram ok\");\n    }\n\n    send_to_telegram(message);\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n                <p>\n                    Edit <code>src/App.js</code> and save to reload.\n                </p>\n                <a\n                    className=\"App-link\"\n                    href=\"https://reactjs.org\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                >\n                    Learn React\n                </a>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}